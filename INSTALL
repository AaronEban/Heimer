Build & install instructions
============================

These are build & install instructions for Dementia.

Build systems
=============

The "official" build system for Linux is CMake.

There are also qmake project files for easier cross-compilation for Windows and Android. Qt5 is required.

I used to make Windows releases also with CMake, but in the future I'll cross-compile for Windows on Ubuntu host by using MXE and qmake. MXE is a cool cross-compilation environment
and all libraries are linked statically by default (no DLLs needed).

Toolchains
==========

GCC/MinGW and Clang are the only "officially" supported toolchains on Linux.

Windows builds are done on Ubuntu with MXE (web: mxe.cc). The build script
also generates automatically an NSIS Windows installer and a ZIP-archive.
See scripts/mxeWindowsBuild.sh.

Building the project with Microsoft Visual C++ 2013 also works, but no automatic
packaging/deployment currently exist. The runtime files (data/, Qt, OpenAL..) must be
manually copied in place. See more detailed instructions below.

Build dependencies
==================

Currently the build depends on Qt only.

Dementia also exploits some features of the C++11 standard,
so a somewhat compliant compiler is required (GCC >= 4.7).

Building in the command line on Linux (tested on Ubuntu 16.04)
==============================================================

Development build (the app can be run without installing anything):
-------------------------------------------------------------------

1) Install Qt5 development files (qt5-default on Ubuntu).
2) Install CMake (cmake on Debian/Ubuntu).
3) Go to the source directory and run:

$ mkdir build
$ cd build
$ cmake ..

This runs CMake that generates the makefiles.

You can also use Qt Creator to open the top-level CMakeLists.txt and build inside Qt Creator.
There's also a convenience configure script which is just a wrapper for cmake.

Anyway, if everything went ok with cmake, run:

$ make

This will build the application.

Run Dementia:

$ ./dementia

Run unit tests:

$ ctest

Release build (in this example Dementia installs under /usr):
--------------------------------------------------------

$ mkdir build
$ cd build
$ cmake .. -DReleaseBuild=1 -DCMAKE_INSTALL_PREFIX=/usr

This runs CMake that generates the makefiles.
If everything went ok, run:

$ make

This will build the application.

Install the binaries and data files:

$ sudo make install

This installs also the desktop files so Dementia should appear in your application menu.

Cross-compiling for Windows with MXE on Linux (tested on Ubuntu 16.04)
======================================================================

1) Install MXE (http://mxe.cc)
2) Install Qt5 with MXE
3) Run <Your MXE installation dir>/usr/i686-pc-mingw32/qt5/bin/qmake dementia.pro
4) make

There's also a script to build the application with a Windows installer:
1) export DEMENTIA_RELEASE_VERSION=x.y.z (use the latest version)
2) source ./scripts/mxeEnv.sh (assumes that MXE is installed in /opt/mxe)
3) ./scripts/mxeWindowsBuild.sh

The script checks that needed binaries are found.

CPack
=====

Dementia has a support for CPack. It's not complete, but can be used to generate
some generic binary packages.

After a successful build run CPack:

$ cpack

This will generate .tar.gz and .sh binary packages on Linux.

For packagers
=============

The release build should be used when packaging (give
-DReleaseBuild=1 to cmake).

CMAKE_INSTALL_PREFIX usually defaults to /usr/local and
can be changed by giving, for example, -DCMAKE_INSTALL_PREFIX=/usr
to cmake (or to the configure script).

There's an example Debian packaging in packaging/debian/.


-- Jussi Lind <jussi.lind@iki.fi>

